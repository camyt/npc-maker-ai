// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b5WcywRoms9zdBws8HK6N7
// Component: xuKRzoGfcJ
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0BRUcT4GxQxVw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0bRUcT4GXQxVW/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_d_d_npc_generator.module.css"; // plasmic-import: b5WcywRoms9zdBws8HK6N7/projectcss
import sty from "./PlasmicInfoPanel.module.css"; // plasmic-import: xuKRzoGfcJ/css

import placeholderportraitpng96N6F9Zn from "./images/placeholderportraitpng.png"; // plasmic-import: 96_n6F9ZN/picture

export type PlasmicInfoPanel__VariantMembers = {};
export type PlasmicInfoPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicInfoPanel__VariantsArgs;
export const PlasmicInfoPanel__VariantProps = new Array<VariantPropType>();

export type PlasmicInfoPanel__ArgsType = {};
type ArgPropType = keyof PlasmicInfoPanel__ArgsType;
export const PlasmicInfoPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicInfoPanel__OverridesType = {
  root?: p.Flex<"div">;
  name2?: p.Flex<"div">;
  portrait?: p.Flex<typeof p.PlasmicImg>;
  name?: p.Flex<"div">;
  age?: p.Flex<"div">;
  gender?: p.Flex<"div">;
  height?: p.Flex<"div">;
  height2?: p.Flex<"div">;
  descriptionBox?: p.Flex<"div">;
  str?: p.Flex<"div">;
  dex?: p.Flex<"div">;
  con?: p.Flex<"div">;
  int?: p.Flex<"div">;
  wis?: p.Flex<"div">;
  cha?: p.Flex<"div">;
  alignment?: p.Flex<"div">;
  job?: p.Flex<"div">;
  personalityBox?: p.Flex<"div">;
  historyBox?: p.Flex<"div">;
  plotBox?: p.Flex<"div">;
};

export interface DefaultInfoPanelProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicInfoPanel__RenderFunc(props: {
  variants: PlasmicInfoPanel__VariantsArgs;
  args: PlasmicInfoPanel__ArgsType;
  overrides: PlasmicInfoPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0BRUcT4GxQxVw()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xzMg8)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__qZqxl)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4S7SY
            )}
          >
            {"Appearance"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xVvIz)}
          >
            <div
              data-plasmic-name={"name2"}
              data-plasmic-override={overrides.name2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.name2
              )}
            >
              {"Firstname Lastname"}
            </div>

            <p.PlasmicImg
              data-plasmic-name={"portrait"}
              data-plasmic-override={overrides.portrait}
              alt={""}
              className={classNames(sty.portrait)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"360px" as const}
              loading={"lazy" as const}
              src={{
                src: placeholderportraitpng96N6F9Zn,
                fullWidth: 500,
                fullHeight: 500,
                aspectRatio: undefined
              }}
            />
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__a0Z6P)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qlsj0
            )}
          >
            {"Physical Description"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wsBUg)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ei87L)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tdFaz
                )}
              >
                {"Name:"}
              </div>

              <div
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.name
                )}
              >
                {"Lastname, Firstname"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__weNhe)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wxhQq
                )}
              >
                {"Age:"}
              </div>

              <div
                data-plasmic-name={"age"}
                data-plasmic-override={overrides.age}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.age
                )}
              >
                {"Age"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__oVoEg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e8LmU
                )}
              >
                {"Gender:"}
              </div>

              <div
                data-plasmic-name={"gender"}
                data-plasmic-override={overrides.gender}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.gender
                )}
              >
                {"gender"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___00D1A)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__whZzI
                )}
              >
                {"Height:"}
              </div>

              <div
                data-plasmic-name={"height"}
                data-plasmic-override={overrides.height}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.height
                )}
              >
                {"height"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__egdF2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__duMb9
                )}
              >
                {"Weight:"}
              </div>

              <div
                data-plasmic-name={"height2"}
                data-plasmic-override={overrides.height2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.height2
                )}
              >
                {"weight"}
              </div>
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__km0AH
              )}
            >
              {"Description"}
            </div>

            <div
              data-plasmic-name={"descriptionBox"}
              data-plasmic-override={overrides.descriptionBox}
              className={classNames(projectcss.all, sty.descriptionBox)}
            />
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__k65Lv)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f71NC
            )}
          >
            {"Statistics"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jNce)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___0Amtv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wzNdC
                )}
              >
                {"STR"}
              </div>

              <div
                data-plasmic-name={"str"}
                data-plasmic-override={overrides.str}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.str
                )}
              >
                {"10"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__bro2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iysR
                )}
              >
                {"DEX"}
              </div>

              <div
                data-plasmic-name={"dex"}
                data-plasmic-override={overrides.dex}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.dex
                )}
              >
                {"10"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___7DO9V)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rbEcr
                )}
              >
                {"CON"}
              </div>

              <div
                data-plasmic-name={"con"}
                data-plasmic-override={overrides.con}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.con
                )}
              >
                {"10"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__xd8Z)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yrBfm
                )}
              >
                {"INT"}
              </div>

              <div
                data-plasmic-name={"int"}
                data-plasmic-override={overrides.int}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.int
                )}
              >
                {"10"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__kTC)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ujDCk
                )}
              >
                {"WIS"}
              </div>

              <div
                data-plasmic-name={"wis"}
                data-plasmic-override={overrides.wis}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.wis
                )}
              >
                {"10"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__oYw4I)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lc9M1
                )}
              >
                {"CHA"}
              </div>

              <div
                data-plasmic-name={"cha"}
                data-plasmic-override={overrides.cha}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.cha
                )}
              >
                {"10"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__oUpr)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xm5Vq
                )}
              >
                {"Alignment"}
              </div>

              <div
                data-plasmic-name={"alignment"}
                data-plasmic-override={overrides.alignment}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.alignment
                )}
              >
                {"TN"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__avm06)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nkXpM
                )}
              >
                {"Class"}
              </div>

              <div
                data-plasmic-name={"job"}
                data-plasmic-override={overrides.job}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.job
                )}
              >
                {"className"}
              </div>
            </div>
          </p.Stack>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___5MIzb)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__sfkWu)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hLcdf
            )}
          >
            {"Personality Traits"}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"personalityBox"}
            data-plasmic-override={overrides.personalityBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.personalityBox)}
          />
        </div>

        <div className={classNames(projectcss.all, sty.freeBox___9KwLw)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yKqnL
            )}
          >
            {"Personal Story"}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"historyBox"}
            data-plasmic-override={overrides.historyBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.historyBox)}
          />
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__kfAkb)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zZXii
            )}
          >
            {"Plot Hook"}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"plotBox"}
            data-plasmic-override={overrides.plotBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.plotBox)}
          />
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "name2",
    "portrait",
    "name",
    "age",
    "gender",
    "height",
    "height2",
    "descriptionBox",
    "str",
    "dex",
    "con",
    "int",
    "wis",
    "cha",
    "alignment",
    "job",
    "personalityBox",
    "historyBox",
    "plotBox"
  ],
  name2: ["name2"],
  portrait: ["portrait"],
  name: ["name"],
  age: ["age"],
  gender: ["gender"],
  height: ["height"],
  height2: ["height2"],
  descriptionBox: ["descriptionBox"],
  str: ["str"],
  dex: ["dex"],
  con: ["con"],
  int: ["int"],
  wis: ["wis"],
  cha: ["cha"],
  alignment: ["alignment"],
  job: ["job"],
  personalityBox: ["personalityBox"],
  historyBox: ["historyBox"],
  plotBox: ["plotBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  name2: "div";
  portrait: typeof p.PlasmicImg;
  name: "div";
  age: "div";
  gender: "div";
  height: "div";
  height2: "div";
  descriptionBox: "div";
  str: "div";
  dex: "div";
  con: "div";
  int: "div";
  wis: "div";
  cha: "div";
  alignment: "div";
  job: "div";
  personalityBox: "div";
  historyBox: "div";
  plotBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInfoPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInfoPanel__VariantsArgs;
    args?: PlasmicInfoPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInfoPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInfoPanel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInfoPanel__ArgProps,
          internalVariantPropNames: PlasmicInfoPanel__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicInfoPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInfoPanel";
  } else {
    func.displayName = `PlasmicInfoPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoPanel = Object.assign(
  // Top-level PlasmicInfoPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    name2: makeNodeComponent("name2"),
    portrait: makeNodeComponent("portrait"),
    _name: makeNodeComponent("name"),
    age: makeNodeComponent("age"),
    gender: makeNodeComponent("gender"),
    height: makeNodeComponent("height"),
    height2: makeNodeComponent("height2"),
    descriptionBox: makeNodeComponent("descriptionBox"),
    str: makeNodeComponent("str"),
    dex: makeNodeComponent("dex"),
    con: makeNodeComponent("con"),
    int: makeNodeComponent("int"),
    wis: makeNodeComponent("wis"),
    cha: makeNodeComponent("cha"),
    alignment: makeNodeComponent("alignment"),
    job: makeNodeComponent("job"),
    personalityBox: makeNodeComponent("personalityBox"),
    historyBox: makeNodeComponent("historyBox"),
    plotBox: makeNodeComponent("plotBox"),

    // Metadata about props expected for PlasmicInfoPanel
    internalVariantProps: PlasmicInfoPanel__VariantProps,
    internalArgProps: PlasmicInfoPanel__ArgProps
  }
);

export default PlasmicInfoPanel;
/* prettier-ignore-end */
