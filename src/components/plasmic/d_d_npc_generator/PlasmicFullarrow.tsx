// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b5WcywRoms9zdBws8HK6N7
// Component: mdBoHorhnE
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0BRUcT4GxQxVw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0bRUcT4GXQxVW/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_d_d_npc_generator.module.css"; // plasmic-import: b5WcywRoms9zdBws8HK6N7/projectcss
import sty from "./PlasmicFullarrow.module.css"; // plasmic-import: mdBoHorhnE/css

import LeftIcon from "./icons/PlasmicIcon__Left"; // plasmic-import: IVIvY3-6s/icon
import RightIcon from "./icons/PlasmicIcon__Right"; // plasmic-import: Gm7LKnqJo/icon

export type PlasmicFullarrow__VariantMembers = {
  right: "right";
};
export type PlasmicFullarrow__VariantsArgs = {
  right?: SingleBooleanChoiceArg<"right">;
};
type VariantPropType = keyof PlasmicFullarrow__VariantsArgs;
export const PlasmicFullarrow__VariantProps = new Array<VariantPropType>(
  "right"
);

export type PlasmicFullarrow__ArgsType = {};
type ArgPropType = keyof PlasmicFullarrow__ArgsType;
export const PlasmicFullarrow__ArgProps = new Array<ArgPropType>();

export type PlasmicFullarrow__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultFullarrowProps {
  right?: SingleBooleanChoiceArg<"right">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicFullarrow__RenderFunc(props: {
  variants: PlasmicFullarrow__VariantsArgs;
  args: PlasmicFullarrow__ArgsType;
  overrides: PlasmicFullarrow__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "right",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.right : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0BRUcT4GxQxVw()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        <p.PlasmicIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant($state, "right", "right") ? RightIcon : LeftIcon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgright]: hasVariant($state, "right", "right")
          })}
          role={"img"}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFullarrow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFullarrow__VariantsArgs;
    args?: PlasmicFullarrow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFullarrow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFullarrow__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFullarrow__ArgProps,
          internalVariantPropNames: PlasmicFullarrow__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFullarrow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFullarrow";
  } else {
    func.displayName = `PlasmicFullarrow.${nodeName}`;
  }
  return func;
}

export const PlasmicFullarrow = Object.assign(
  // Top-level PlasmicFullarrow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicFullarrow
    internalVariantProps: PlasmicFullarrow__VariantProps,
    internalArgProps: PlasmicFullarrow__ArgProps
  }
);

export default PlasmicFullarrow;
/* prettier-ignore-end */
